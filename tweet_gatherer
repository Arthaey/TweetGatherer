#!/usr/bin/env ruby

require "rubygems"
require "optparse"
require "yaml"

# make sure this directory is in the load path, eg to work with cron
require "pathname"
$LOAD_PATH << File.dirname(Pathname.new(File.expand_path(__FILE__)).realpath.to_s).to_s

require "lib/tweet_gatherer.rb"
require "lib/emailer.rb"

def parse_config(yml_override = nil)
  filename = File.basename(__FILE__, ".rb")
  this_dir = File.expand_path(File.dirname(__FILE__))
  yml_default = "#{filename}.mine.yml"
  yml_filename = yml_override || yml_default

  begin
    YAML.load_file(File.join(this_dir, yml_filename))
  rescue Errno::ENOENT
    abort("ERROR: Configuration file '#{yml_filename}' does not exist.")
  end
end

def parse_options
  opts = {}
  OptionParser.new do |args|
    args.on("-d", "--date DATE", "Date (defaults to today)") do |arg|
      opts[:date] = arg
    end
    args.on("-n", "--num NUM", "Number of tweets to get per call") do |arg|
      opts[:num_tweets] = arg
    end
    args.on("-t", "--to EMAIL", "Email specified address; ignore config file") do |arg|
      opts[:to_email] = arg
    end
    args.on("-f", "--[no-]dry-run", "Print email to STDOUT instead of sending it") do |arg|
      opts[:dry_run] = arg
    end
    args.on("-y", "--yml [FILENAME", "Yaml configuration file") do |arg|
      opts[:yml] = arg
    end
    args.on_tail("-h", "--help", "Show this help message") do
      puts args
      puts "\nSettings are read from #{$0}.yml"
      exit
    end
  end.parse!
  opts
end


## MAIN PROGRAM ################################################################

if __FILE__ == $0
  opts = parse_options
  config = parse_config(opts[:yml])

  tg = TweetGatherer.new(config["twitter"], opts[:date], opts[:num_tweets])
  exit if tg.tweets.empty? && tg.replies.empty? && tg.retweets.empty?

  tweets = {
    :tweets   => tg.tweets,
    :replies  => tg.replies,
    :retweets => tg.retweets,
  }

  # override configuration values as necessary
  config["emails"] ||= {}
  config["emails"]["to"] = opts[:to_email] unless opts[:to_email].nil?

  screen_name = Twitter.user.screen_name
  subject = "Tweets from @#{screen_name} on #{tg.date}"
  emailer = Emailer.new(config["emails"], tweets, screen_name, subject)

  if opts[:dry_run]
    puts emailer.text
  else
    emailer.send
  end
end
